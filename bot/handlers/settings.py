import json
import os
from datetime import datetime
from typing import Dict, Optional
import asyncio

import aiohttp
import pandas as pd
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import structlog
from aiogram.exceptions import TelegramBadRequest

from bot.keyboards.menu import (
    get_main_menu_keyboard,
    get_settings_keyboard,
    get_cancel_keyboard
)
from bot.keyboards.settings import (
    get_subjects_keyboard,
    get_status_keyboard
)
from bot.services.data_fetcher import fetch_data
from bot.states.settings import SettingsState
from bot.utils.data import load_subjects, load_statuses


router = Router()
logger = structlog.get_logger()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
fetch_tasks: Dict[int, asyncio.Task] = {}


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å torgi.gov.ru\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(Command("settings"))
async def cmd_settings(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    await state.set_state(SettingsState.main_menu)
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_settings_keyboard()
    )


async def update_progress(
    message: Message,
    current: int,
    total: int,
    user_id: int
) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    if user_id not in fetch_tasks or fetch_tasks[user_id].cancelled():
        return
        
    try:
        await message.edit_text(
            f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {current}/{total}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        logger.error("Failed to update progress", error=str(e))


@router.callback_query(F.data == "cancel_fetch")
async def cancel_fetch(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    
    if user_id in fetch_tasks and not fetch_tasks[user_id].done():
        fetch_tasks[user_id].cancel()
        await callback.message.edit_text(
            "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_settings_keyboard()
        )
        logger.info("Fetch task cancelled by user", user_id=user_id)
    else:
        await callback.message.edit_text(
            "‚ùì –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_settings_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "select_subject")
async def select_subject(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–±—ä–µ–∫—Ç–æ–≤"""
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    selected_subjects = data.get("selected_subjects", [])
    
    await state.set_state(SettingsState.selecting_subject)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–±—ä–µ–∫—Ç—ã –†–§:",
        reply_markup=get_subjects_keyboard(current_page, selected_subjects)
    )
    await callback.answer()


@router.callback_query(F.data == "select_status")
async def select_status(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    data = await state.get_data()
    selected_statuses = data.get("selected_statuses", [])
    
    await state.set_state(SettingsState.selecting_status)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å—ã:",
        reply_markup=get_status_keyboard(selected_statuses)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("subject_"))
async def process_subject_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—É–±—ä–µ–∫—Ç–∞"""
    data = await state.get_data()
    selected_subjects = data.get("selected_subjects", [])
    current_page = data.get("current_page", 0)
    
    subject_code = callback.data.split("_")[1]
    was_selected = subject_code in selected_subjects
    
    if was_selected:
        selected_subjects.remove(subject_code)
    else:
        selected_subjects.append(subject_code)
    
    await state.update_data(selected_subjects=selected_subjects)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    new_keyboard = get_subjects_keyboard(current_page, selected_subjects)
    
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–±—ä–µ–∫—Ç—ã –†–§:",
            reply_markup=new_keyboard
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
            raise
    
    await callback.answer(
        "‚úÖ –°—É–±—ä–µ–∫—Ç —É–±—Ä–∞–Ω" if was_selected else "‚úÖ –°—É–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω"
    )


@router.callback_query(F.data.startswith("status_"))
async def process_status_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞"""
    data = await state.get_data()
    selected_statuses = data.get("selected_statuses", [])
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "status_"
    status_code = "_".join(callback.data.split("_")[1:])  # –ò–∑–º–µ–Ω–µ–Ω–æ –∑–¥–µ—Å—å
    was_selected = status_code in selected_statuses
    
    if was_selected:
        selected_statuses.remove(status_code)
    else:
        selected_statuses.append(status_code)
    
    await state.update_data(selected_statuses=selected_statuses)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    new_keyboard = get_status_keyboard(selected_statuses)
    
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å—ã:",
            reply_markup=new_keyboard
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
            raise
    
    await callback.answer(
        "‚úÖ –°—Ç–∞—Ç—É—Å —É–±—Ä–∞–Ω" if was_selected else "‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª–µ–Ω"
    )


@router.callback_query(F.data.in_(["prev_page", "next_page"]))
async def process_pagination(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é"""
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    selected_subjects = data.get("selected_subjects", [])
    
    if callback.data == "prev_page":
        current_page = max(0, current_page - 1)
    else:
        subjects = load_subjects()
        max_page = (len(subjects) - 1) // 10
        current_page = min(max_page, current_page + 1)
    
    await state.update_data(current_page=current_page)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–±—ä–µ–∫—Ç—ã –†–§:",
        reply_markup=get_subjects_keyboard(current_page, selected_subjects)
    )
    await callback.answer()


@router.callback_query(F.data == "start_fetch")
async def start_data_fetch(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
    await callback.answer()
    
    user_id = callback.from_user.id
    if user_id in fetch_tasks and not fetch_tasks[user_id].done():
        await callback.message.edit_text(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    data = await state.get_data()
    selected_subjects = data.get("selected_subjects", [])
    selected_statuses = data.get("selected_statuses", [])
    
    if not selected_subjects or not selected_statuses:
        await callback.message.edit_text(
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—É–±—ä–µ–∫—Ç –∏ –æ–¥–∏–Ω —Å—Ç–∞—Ç—É—Å!",
            reply_markup=get_settings_keyboard()
        )
        return
    
    status_message = await callback.message.edit_text(
        "‚è≥ –ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å, –æ–∂–∏–¥–∞–π—Ç–µ...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.",
        reply_markup=get_cancel_keyboard()
    )
    
    try:
        logger.info(
            "Starting data fetch",
            subjects=selected_subjects,
            statuses=selected_statuses,
            user_id=user_id
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        fetch_tasks[user_id] = asyncio.create_task(fetch_data(
            selected_subjects,
            selected_statuses,
            progress_callback=lambda current, total: update_progress(
                status_message, current, total, user_id
            )
        ))
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        try:
            data = await fetch_tasks[user_id]
        except asyncio.CancelledError:
            logger.info("Fetch task was cancelled", user_id=user_id)
            return
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            fetch_tasks.pop(user_id, None)
        
        if not data:
            await status_message.edit_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º",
                reply_markup=get_settings_keyboard()
            )
            return
            
        await status_message.edit_text(
            f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(data)} –∑–∞–ø–∏—Å–µ–π...\n"
            "–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."
        )
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            from bot.utils.data_processing import data_processing
            filename = data_processing(data, selected_subjects, selected_statuses)
            
            if not filename:
                await status_message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö",
                    reply_markup=get_settings_keyboard()
                )
                return
                
            # –°–æ–∑–¥–∞–µ–º FSInputFile –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
            file = FSInputFile(filename)
            await callback.message.answer_document(
                document=file,
                caption=(
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}\n"
                    f"üè¢ –í—ã–±—Ä–∞–Ω–æ —Å—É–±—ä–µ–∫—Ç–æ–≤: {len(selected_subjects)}\n"
                    f"üìã –í—ã–±—Ä–∞–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: {len(selected_statuses)}"
                )
            )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            os.remove(filename)
            logger.info("File removed after sending", filename=filename)
            
            await status_message.edit_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:",
                reply_markup=get_settings_keyboard()
            )
        except Exception as e:
            logger.error(
                "Error during data processing",
                error=str(e)
            )
            await status_message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_settings_keyboard()
            )
        
    except Exception as e:
        logger.error(
            "Error during data fetch",
            error=str(e),
            user_id=user_id
        )
        await status_message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_settings_keyboard()
        )


@router.callback_query(F.data.in_(["done_subjects", "done_statuses"]))
async def return_to_settings(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await state.set_state(SettingsState.main_menu)
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "back")
async def go_back(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()
